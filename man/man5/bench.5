.TH BENCH 5NEMO "25 July 2020"
.SH NAME
bench \- NEMO benchmarks
.SH SYNOPSIS
/usr/bin/time $NEMO/src/scripts/nemo.bench bsf=1
.SH RESULTS
Reported are user time in CPU seconds:
.nf
.ta +2.5i +0.5i

Intel Core i9-9900X	25.8	geminid 1214 / 9467
i5-10210U CPU @ 1.60GHz	29.4 	X1Y4  1029 / 3194
Xeon(R) Silver 4114 @ 2.20GHz	37.1	terra 777 / 10213
i7-8550U CPU @ 1.80GHz	40.6 	T480 (1600) 696 / 1935
Xeon E-2186G 3.80GHz	52.6 	aurora 1313 / 6721
i7-3820 CPU @ 3.60GHz	??/67.5 	dante 833 / 3693
Xeon(R) CPU E3-1280 @ 3.50GHz	??/70.3 	chara 828 / 3117
i7-3630QM CPU @ 2.40GHz	76.2 	T530 (1200) 762 / 3006 
Xeon(R) E5-2623 v4 @ 2.60GHz	42.1/79.4 	kraken 782 / 5800
Xeon(R) X5550  @ 2.67GHz	115.4	sdp 566 / 3938
.fi
.SH NEW DESCRIPTION
The following tasks are run in the standard NEMO bench:
.nf

\fIdirectcode nbody=3072 out=d0 seed=123 
hackcode1 nbody=10240  out=h0 seed=123 
mkplummer p0 10240 seed=123 
gyrfalcON p0 p1 kmax=6 tstop=2 eps=0.05
potcode p0 p2 freqout=10 freq=1000 tstop=2 potname=plummer
mkspiral s0 $nbody3 nmodel=40 seed=123 
ccdmath "" c0 'ranu(0,1)' size=256 seed=123
ccdpot c0 c1 
mkorbit o0 x=1 e=1 lz=1 potname=log
orbint o0 o1 nsteps=10000000 dt=0.001 nsave=100000\fP

.fi
In addition each data file that is produced is checksummed and compared
to a baseline version using \fIbsf(1NEMO)\fP.

.SH OLD DESCRIPTION
An older benchmark focused on a few N-body codes only:
.PP
\fBbench1\fP tests the classic (1986) Barnes and Hut code in C, without
quadrupole corrections, for 10240 particles and 64 timesteps.
\fBbench2\fP tests a more modern Treecode, this one is the
O(N) version from Dehnen (2002). Again 64 timesteps.
\fBbench0\fP has been added to compare a tree code with a 
direct N-body code, also 64 timesteps, but now for fewer particles to prevent
the benchmark to dominate the whole series.
\fBbench3\fP benchmarks the I/O and creation of a large (>2GB) snapshot.
\fBbench4\fP benchmarks an image operation.
\fBbench5\fP benchmarks an orbit calculation.
.SH DATA
Here are the commands to execute the benchmarks, now the default in "cd $NEMO;make bench"
.ta +1i
.nf
\fBbench0\fP:	\fItime directcode nbody=10240\fP
\fBbench1\fP:	\fItime hackcode1 nbody=10240\fP
\fBbench2\fP:	\fItime mkplummer p1 10240; time gyrfalcON p1 . kmax=6 tstop=2 eps=0.05\fB
\fBbench3\fP:	\fItime mkspiral s000 1000000 nmodel=40\fP
\fBbench4\fP:	\fIccdmath "" - 'ranu(0,1)' size=128 | ccdpot - . help=c\fB
.fi
.PP
and the data :
.PP
.nf
.ta +3i
bench0 (directcode)
       I5/7200@2.5	47.7 
       I7/3630QM@3.6	174.2  (nemo2: 
       I7/3770@3.5	152.6
       P4/3.0	342.7
       G5/2.0	472.8
       AMD-opt64/2.0	300.3
       AMD-ath64/2.0	888.7
       P4/2.8 w/cygwin	365.9
       x86_64/3.0	516.4
       x86_64/3.2	480.6
       sparcv9+vis/0.36	3048.2

bench1 (hackcode1)
       I5/2.5            2.2
       I7/3.6		14.0  (nemo2: 1.2 - 3.6)  5.1
       I7/3.5		 4.4
       P4/3.0           13.4
       G5/2.0           13.1
       AMD-opt64/2.0     9.36
       AMD-ath64/2.0    17.45
       P4/2.8 w/cygwin  15.1
       x86_64/3.0       11.7
       x86_64/3.2       10.7
       sparcv9+vis/0.36 81.5

bench2 (gyrfalcON)
       I5/2.5            2.5
       I7/3.6		 8.1  (nemo2)  2.948 3.19 5.09
       I7/3.6		31.2  (?)
       P4/3.0           10.8
       G5/2.0           21.0
       AMD-opt64/2.0     8.1
       AMD-ath64/2.0     8.9
       P4/2.8 w/cygwin  45.5
       x86_64/3.2        8.6
       sparcv9+vis/0.36 85.1  

bench3 (mkspiral)
       I5/2.5    5.4u   1.6s
       I7/3.6	23.657u 3.856s 0:28.04 98.0%  (nemo2)
	        10.760u 0.832s 0:20.33 57.0%
       I7/3.5	7.112u 1.520 0:09.37 98.5%
       P4/3.0	22.890u  5.980s 1:45.63 27.3%
       G5/2.0	28.400u 24.660s 1:05.41 81.1% 
       AMD-opt64/2.0	18.540u 10.921s 0:56.93 51.7% 
       AMD-ath64/2.0	29.311u 10.353s 0:59.88 66.2% (SATA)
       P4/2.8	25.541u 8.081s 0:59.98 56.0% (S/ATA)
       P4/2.8 w/cygwin	276.56u 26.35s 6:34.75 76.7% (using mkplummer V2.8)
       x86_64/3.0       21.651u 8.897s 0:48.05 63.5%    0+0k 0+0io 0pf+0w
       x86_64/3.2       21.950u 9.997s 0:39.37 81.1%  (SATA)
       i7/2.93          7.892u 3.170s 0:12.92 85.6% (HDD)
       i7/2.93          7.662u 1.467s 0:09.13 99.8% (SHMEM)

bench4 (ccdpot)
       I5/2.5   11.9
       I7/3.6	23.657u 3.856s 0:28.04 98.0%  (nemo2)

.fi
.SH CAVEATS
Defining and running a benchmark can be very tricky stuff. It might be
important to separate disk I/O from CPU usage.   The unix \fItime(1)\fP 
command can be a help. The output from bash::time is a bit different
form csh::time, and yet different from /usr/bin/time. Unless you find
a special one, we prefer the csh::time, since the output clearly
separates user, system and wall clock time, and also reports the I/O, viz.
.nf
   % time ls 
   0.012u 0.068s 0:00.77 9.0%	0+0k 8376+0io 0pf+0w
   2.324u 1.080s 0:09.25 36.7%	0+0k 1049384+2097160io 2pf+0w
   1.876u 0.788s 0:03.63 73.0%	0+0k 0+2097160io 0pf+0w
.fi
On linux the command 
.nf
   echo 1 > > /proc/sys/vm/drop_caches
.fi
will clear the disk cache in memory, so your program will be forced to read
from disk, with all possible interference from other programs
.PP
In NEMO another useful addition to the benchmark is that the output can be
turned off easily, by using \fBout=.\fP, viz.
.nf
    % sudo $NEMO/src/scripts/clearcache
    % time ccdsmooth n1 . dir=x
    0.852u 1.068s 0:12.41 15.3%	0+0k 2098312+0io 6pf+0w
    0.812u 0.400s 0:01.21 100.0%	0+0k 0+0io 0pf+0w
    0.820u 0.380s 0:01.20 100.0%	0+0k 0+0io 0pf+0w
.fi
where the last two instances were just re-running the same command, but
now clearly showing the effect of reading the file from memory instead
of disk. By repeating this whole series a few times, an lower bound to the 
wall clock time is more likely to properly account for the I/O overhead time.
.SH  "OTHERS"
A few other man pages in NEMO also maintain their own list how its program compares under different compilers/options/cpu options:
.nf
.ta +1i
\fICGS(1NEMO)\fP
\fIscfm(1NEMO)\fP
.fi
.PP
Other industry benchmarks:
.nf
    Geekbench 5 (very wide variety of compute workloads - baseline is i3-8100)
    Linpack   (focus on floating point operations - Gflops)
    SPEC CPU 2017 ($$$) benchmark - 
.fi
.SH "TABBENCH"
The table I/O benchmark uses a 100M row dataset with 3 columns,
representing X,Y,Z of which the radius R=sqrt(X^2+Y^2+Z^2) is computed. This table
is about 2.7 GB in size.
Of course reading the table is all dependent on the HDD/SDD, but in the case described here
this was a fast SSD, and took 2 sec to read, or just over 1000 MB/sec.
.nf

    /usr/bin/time tabgen tab3 100000000 3
    /usr/bin/time tabbench2 . mode=-1
    
.nf
this bench will need to be repeated for mode=0,1,2,3 to estimate the different components as they
are added to the workflow. The \fItabgen(1NEMO)\fP is dominated by
drawing random numbers and writing them using \fIprintf(3)\fP , which is slow.

.nf
    80s   writing, using tabgen
     2s   reading in tabbench2
    22s   parsing in numbers  [np.loadtxt takes 748 sec!!!]
     6s   using \fIfie(3NEMO)\fP to compute radii
     1s   using np.sqrt(), and presumably C's sqrt() as well
    
.fi
.SH "CONSIDERATIONS"
Most programs that need an output file, can use \fBout=-\fP to pass the data into a standard Unix pipe,
or even \fBout=.\fP to use a sink. This does however mean that 
.SH "SEE ALSO"
gyrfalcON(1NEMO), data(5NEMO), tabgen(1NEMO), mkspiral(1NEMO), mkplummer(1NEMO), hackcode1(1NEMO), nbody1(1NEMO), scfm(1NEMO), CGS(1NEMO), triple(1NEMO), accudate(lNEMO), bsf(1NEMO)
.PP
https://browser.geekbench.com/processor-benchmarks
.SH "AUTHOR"
Peter Teuben
.SH "FILES"
.nf
.ta +2.5i
~/data   	standard repository area for data files.
.fi
.SH "UPDATE HISTORY"
.nf
.ta +1.0i +4.0i
12-may-97	created  	PJT
26-nov-03	finally added some data		PJT
17-feb-04	added bench0 comparison  	PJT
31-mar-05	added some cygwin numbers, fixed input	PJT
6-may-11	added i7 and SHMEM/HDD comparison   PJT
27-sep-13	added caveats	PJT
6-jan-2018	updated for V4, more balanced benchmarks	PJT
27-dec-2019	nemo.bench; updated with potcode and orbint; now 10 tasks	PJT
26-jul-2020	added timings for recent machines/ added geekbench5	PJT
.fi
